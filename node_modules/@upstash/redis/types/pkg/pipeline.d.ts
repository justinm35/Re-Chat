import { DelCommand, ExistsCommand, FlushAllCommand, JsonArrAppendCommand, JsonArrIndexCommand, JsonArrInsertCommand, JsonArrLenCommand, JsonArrPopCommand, JsonArrTrimCommand, JsonClearCommand, JsonDelCommand, JsonForgetCommand, JsonGetCommand, JsonMGetCommand, JsonNumIncrByCommand, JsonNumMultByCommand, JsonObjKeysCommand, JsonObjLenCommand, JsonRespCommand, JsonSetCommand, JsonStrAppendCommand, JsonStrLenCommand, JsonToggleCommand, JsonTypeCommand, MGetCommand, PingCommand, ScoreMember, ScriptExistsCommand, SetCommandOptions, TouchCommand, UnlinkCommand, ZAddCommandOptions, ZAddCommandOptionsWithIncr, ZRangeCommandOptions } from "./commands/mod.js";
import { CommandOptions } from "./commands/command.js";
import { Requester } from "./http.js";
import { CommandArgs } from "./types.js";
/**
 * Upstash REST API supports command pipelining to send multiple commands in
 * batch, instead of sending each command one by one and waiting for a response.
 * When using pipelines, several commands are sent using a single HTTP request,
 * and a single JSON array response is returned. Each item in the response array
 * corresponds to the command in the same order within the pipeline.
 *
 * **NOTE:**
 *
 * Execution of the pipeline is not atomic. Even though each command in
 * the pipeline will be executed in order, commands sent by other clients can
 * interleave with the pipeline.
 *
 * **Examples:**
 *
 * ```ts
 *  const p = redis.pipeline() // or redis.multi()
 * p.set("key","value")
 * p.get("key")
 * const res = await p.exec()
 * ```
 *
 * You can also chain commands together
 * ```ts
 * const p = redis.pipeline()
 * const res = await p.set("key","value").get("key").exec()
 * ```
 *
 * It's not possible to infer correct types with a dynamic pipeline, so you can
 * override the response type manually:
 * ```ts
 *  redis.pipeline()
 *   .set("key", { greeting: "hello"})
 *   .get("key")
 *   .exec<["OK", { greeting: string } ]>()
 *
 * ```
 */
export declare class Pipeline {
    private client;
    private commands;
    private commandOptions?;
    private multiExec;
    constructor(opts: {
        client: Requester;
        commandOptions?: CommandOptions<any, any>;
        multiExec?: boolean;
    });
    /**
     * Send the pipeline request to upstash.
     *
     * Returns an array with the results of all pipelined commands.
     *
     * You can define a return type manually to make working in typescript easier
     * ```ts
     * redis.pipeline().get("key").exec<[{ greeting: string }]>()
     * ```
     */
    exec: <TCommandResults extends unknown[] = unknown[]>() => Promise<TCommandResults>;
    /**
     * Pushes a command into the pipelien and returns a chainable instance of the
     * pipeline
     */
    private chain;
    /**
     * @see https://redis.io/commands/append
     */
    append: (key: string, value: string) => this;
    /**
     * @see https://redis.io/commands/bitcount
     */
    bitcount: (key: string, start: number, end: number) => this;
    /**
     * @see https://redis.io/commands/bitop
     */
    bitop: {
        (op: "and" | "or" | "xor", destinationKey: string, sourceKey: string, ...sourceKeys: string[]): Pipeline;
        (op: "not", destinationKey: string, sourceKey: string): Pipeline;
    };
    /**
     * @see https://redis.io/commands/bitpos
     */
    bitpos: (key: string, bit: 0 | 1, start?: number | undefined, end?: number | undefined) => this;
    /**
     * @see https://redis.io/commands/zdiffstore
     */
    zdiffstore: (destination: string, numkeys: number, ...keys: string[]) => this;
    /**
     * @see https://redis.io/commands/dbsize
     */
    dbsize: () => this;
    /**
     * @see https://redis.io/commands/decr
     */
    decr: (key: string) => this;
    /**
     * @see https://redis.io/commands/decrby
     */
    decrby: (key: string, decrement: number) => this;
    /**
     * @see https://redis.io/commands/del
     */
    del: (...args: CommandArgs<typeof DelCommand>) => this;
    /**
     * @see https://redis.io/commands/echo
     */
    echo: (message: string) => this;
    /**
     * @see https://redis.io/commands/eval
     */
    eval: <TArgs extends unknown[], TData = unknown>(script: string, keys: string[], args: TArgs) => this;
    /**
     * @see https://redis.io/commands/evalsha
     */
    evalsha: <TArgs extends unknown[], TData = unknown>(sha1: string, keys: string[], args: TArgs) => this;
    /**
     * @see https://redis.io/commands/exists
     */
    exists: (...args: CommandArgs<typeof ExistsCommand>) => this;
    /**
     * @see https://redis.io/commands/expire
     */
    expire: (key: string, seconds: number) => this;
    /**
     * @see https://redis.io/commands/expireat
     */
    expireat: (key: string, unix: number) => this;
    /**
     * @see https://redis.io/commands/flushall
     */
    flushall: (args?: CommandArgs<typeof FlushAllCommand>) => this;
    /**
     * @see https://redis.io/commands/flushdb
     */
    flushdb: (opts?: {
        async?: boolean | undefined;
    } | undefined) => this;
    /**
     * @see https://redis.io/commands/get
     */
    get: <TData>(key: string) => this;
    /**
     * @see https://redis.io/commands/getbit
     */
    getbit: (key: string, offset: number) => this;
    /**
     * @see https://redis.io/commands/getdel
     */
    getdel: <TData>(key: string) => this;
    /**
     * @see https://redis.io/commands/getrange
     */
    getrange: (key: string, start: number, end: number) => this;
    /**
     * @see https://redis.io/commands/getset
     */
    getset: <TData>(key: string, value: TData) => this;
    /**
     * @see https://redis.io/commands/hdel
     */
    hdel: (key: string, field: string) => this;
    /**
     * @see https://redis.io/commands/hexists
     */
    hexists: (key: string, field: string) => this;
    /**
     * @see https://redis.io/commands/hget
     */
    hget: <TData>(key: string, field: string) => this;
    /**
     * @see https://redis.io/commands/hgetall
     */
    hgetall: <TData extends Record<string, unknown>>(key: string) => this;
    /**
     * @see https://redis.io/commands/hincrby
     */
    hincrby: (key: string, field: string, increment: number) => this;
    /**
     * @see https://redis.io/commands/hincrbyfloat
     */
    hincrbyfloat: (key: string, field: string, increment: number) => this;
    /**
     * @see https://redis.io/commands/hkeys
     */
    hkeys: (key: string) => this;
    /**
     * @see https://redis.io/commands/hlen
     */
    hlen: (key: string) => this;
    /**
     * @see https://redis.io/commands/hmget
     */
    hmget: <TData extends Record<string, unknown>>(key: string, ...fields: string[]) => this;
    /**
     * @see https://redis.io/commands/hmset
     */
    hmset: <TData>(key: string, kv: {
        [field: string]: TData;
    }) => this;
    /**
     * @see https://redis.io/commands/hrandfield
     */
    hrandfield: <TData extends string | string[] | Record<string, unknown>>(key: string, count?: number, withValues?: boolean) => this;
    /**
     * @see https://redis.io/commands/hscan
     */
    hscan: (key: string, cursor: number, cmdOpts?: import("./commands/scan.js").ScanCommandOptions | undefined) => this;
    /**
     * @see https://redis.io/commands/hset
     */
    hset: <TData>(key: string, kv: {
        [field: string]: TData;
    }) => this;
    /**
     * @see https://redis.io/commands/hsetnx
     */
    hsetnx: <TData>(key: string, field: string, value: TData) => this;
    /**
     * @see https://redis.io/commands/hstrlen
     */
    hstrlen: (key: string, field: string) => this;
    /**
     * @see https://redis.io/commands/hvals
     */
    hvals: (key: string) => this;
    /**
     * @see https://redis.io/commands/incr
     */
    incr: (key: string) => this;
    /**
     * @see https://redis.io/commands/incrby
     */
    incrby: (key: string, value: number) => this;
    /**
     * @see https://redis.io/commands/incrbyfloat
     */
    incrbyfloat: (key: string, value: number) => this;
    /**
     * @see https://redis.io/commands/keys
     */
    keys: (pattern: string) => this;
    /**
     * @see https://redis.io/commands/lindex
     */
    lindex: (key: string, index: number) => this;
    /**
     * @see https://redis.io/commands/linsert
     */
    linsert: <TData>(key: string, direction: "before" | "after", pivot: TData, value: TData) => Pipeline;
    /**
     * @see https://redis.io/commands/llen
     */
    llen: (key: string) => this;
    /**
     * @see https://redis.io/commands/lmove
     */
    lmove: <TData = string>(source: string, destination: string, whereFrom: "left" | "right", whereTo: "left" | "right") => this;
    /**
     * @see https://redis.io/commands/lpop
     */
    lpop: <TData>(key: string, count?: number | undefined) => this;
    /**
     * @see https://redis.io/commands/lpos
     */
    lpos: <TData>(key: string, element: unknown, opts?: {
        rank?: number | undefined;
        count?: number | undefined;
        maxLen?: number | undefined;
    } | undefined) => this;
    /**
     * @see https://redis.io/commands/lpush
     */
    lpush: <TData>(key: string, ...elements: TData[]) => this;
    /**
     * @see https://redis.io/commands/lpushx
     */
    lpushx: <TData>(key: string, ...elements: TData[]) => this;
    /**
     * @see https://redis.io/commands/lrange
     */
    lrange: <TResult = string>(key: string, start: number, end: number) => this;
    /**
     * @see https://redis.io/commands/lrem
     */
    lrem: <TData>(key: string, count: number, value: TData) => this;
    /**
     * @see https://redis.io/commands/lset
     */
    lset: <TData>(key: string, index: number, value: TData) => this;
    /**
     * @see https://redis.io/commands/ltrim
     */
    ltrim: (key: string, start: number, end: number) => this;
    /**
     * @see https://redis.io/commands/mget
     */
    mget: <TData extends unknown[]>(...args: CommandArgs<typeof MGetCommand>) => this;
    /**
     * @see https://redis.io/commands/mset
     */
    mset: <TData>(kv: {
        [key: string]: TData;
    }) => this;
    /**
     * @see https://redis.io/commands/msetnx
     */
    msetnx: <TData>(kv: {
        [key: string]: TData;
    }) => this;
    /**
     * @see https://redis.io/commands/persist
     */
    persist: (key: string) => this;
    /**
     * @see https://redis.io/commands/pexpire
     */
    pexpire: (key: string, milliseconds: number) => this;
    /**
     * @see https://redis.io/commands/pexpireat
     */
    pexpireat: (key: string, unix: number) => this;
    /**
     * @see https://redis.io/commands/ping
     */
    ping: (args?: CommandArgs<typeof PingCommand>) => this;
    /**
     * @see https://redis.io/commands/psetex
     */
    psetex: <TData>(key: string, ttl: number, value: TData) => this;
    /**
     * @see https://redis.io/commands/pttl
     */
    pttl: (key: string) => this;
    /**
     * @see https://redis.io/commands/publish
     */
    publish: (channel: string, message: unknown) => this;
    /**
     * @see https://redis.io/commands/randomkey
     */
    randomkey: () => this;
    /**
     * @see https://redis.io/commands/rename
     */
    rename: (source: string, destination: string) => this;
    /**
     * @see https://redis.io/commands/renamenx
     */
    renamenx: (source: string, destination: string) => this;
    /**
     * @see https://redis.io/commands/rpop
     */
    rpop: <TData = string>(key: string, count?: number | undefined) => this;
    /**
     * @see https://redis.io/commands/rpush
     */
    rpush: <TData>(key: string, ...elements: TData[]) => this;
    /**
     * @see https://redis.io/commands/rpushx
     */
    rpushx: <TData>(key: string, ...elements: TData[]) => this;
    /**
     * @see https://redis.io/commands/sadd
     */
    sadd: <TData>(key: string, ...members: TData[]) => this;
    /**
     * @see https://redis.io/commands/scan
     */
    scan: (cursor: number, opts?: import("./commands/scan.js").ScanCommandOptions | undefined) => this;
    /**
     * @see https://redis.io/commands/scard
     */
    scard: (key: string) => this;
    /**
     * @see https://redis.io/commands/script-exists
     */
    scriptExists: (...args: CommandArgs<typeof ScriptExistsCommand>) => this;
    /**
     * @see https://redis.io/commands/script-flush
     */
    scriptFlush: (opts?: import("./commands/script_flush.js").ScriptFlushCommandOptions | undefined) => this;
    /**
     * @see https://redis.io/commands/script-load
     */
    scriptLoad: (script: string) => this;
    sdiff: (key: string, ...keys: string[]) => this;
    /**
     * @see https://redis.io/commands/sdiffstore
     */
    sdiffstore: (destination: string, ...keys: string[]) => this;
    /**
     * @see https://redis.io/commands/set
     */
    set: <TData>(key: string, value: TData, opts?: SetCommandOptions) => this;
    /**
     * @see https://redis.io/commands/setbit
     */
    setbit: (key: string, offset: number, value: 0 | 1) => this;
    /**
     * @see https://redis.io/commands/setex
     */
    setex: <TData>(key: string, ttl: number, value: TData) => this;
    /**
     * @see https://redis.io/commands/setnx
     */
    setnx: <TData>(key: string, value: TData) => this;
    /**
     * @see https://redis.io/commands/setrange
     */
    setrange: (key: string, offset: number, value: string) => this;
    /**
     * @see https://redis.io/commands/sinter
     */
    sinter: (key: string, ...keys: string[]) => this;
    /**
     * @see https://redis.io/commands/sinterstore
     */
    sinterstore: (destination: string, key: string, ...keys: string[]) => this;
    /**
     * @see https://redis.io/commands/sismember
     */
    sismember: <TData>(key: string, member: TData) => this;
    /**
     * @see https://redis.io/commands/smembers
     */
    smembers: <TData extends unknown[] = string[]>(key: string) => this;
    /**
     * @see https://redis.io/commands/smismember
     */
    smismember: <TMembers extends unknown[]>(key: string, members: TMembers) => this;
    /**
     * @see https://redis.io/commands/smove
     */
    smove: <TData>(source: string, destination: string, member: TData) => this;
    /**
     * @see https://redis.io/commands/spop
     */
    spop: <TData>(key: string, count?: number | undefined) => this;
    /**
     * @see https://redis.io/commands/srandmember
     */
    srandmember: <TData>(key: string, count?: number | undefined) => this;
    /**
     * @see https://redis.io/commands/srem
     */
    srem: <TData>(key: string, ...members: TData[]) => this;
    /**
     * @see https://redis.io/commands/sscan
     */
    sscan: (key: string, cursor: number, opts?: import("./commands/scan.js").ScanCommandOptions | undefined) => this;
    /**
     * @see https://redis.io/commands/strlen
     */
    strlen: (key: string) => this;
    /**
     * @see https://redis.io/commands/sunion
     */
    sunion: (key: string, ...keys: string[]) => this;
    /**
     * @see https://redis.io/commands/sunionstore
     */
    sunionstore: (destination: string, key: string, ...keys: string[]) => this;
    /**
     * @see https://redis.io/commands/time
     */
    time: () => this;
    /**
     * @see https://redis.io/commands/touch
     */
    touch: (...args: CommandArgs<typeof TouchCommand>) => this;
    /**
     * @see https://redis.io/commands/ttl
     */
    ttl: (key: string) => this;
    /**
     * @see https://redis.io/commands/type
     */
    type: (key: string) => this;
    /**
     * @see https://redis.io/commands/unlink
     */
    unlink: (...args: CommandArgs<typeof UnlinkCommand>) => this;
    /**
     * @see https://redis.io/commands/zadd
     */
    zadd: <TData>(...args: [key: string, scoreMember: ScoreMember<TData>, ...scoreMemberPairs: ScoreMember<TData>[]] | [string, ZAddCommandOptions | ZAddCommandOptionsWithIncr, ScoreMember<TData>, ...ScoreMember<TData>[]]) => this;
    /**
     * @see https://redis.io/commands/zcard
     */
    zcard: (key: string) => this;
    /**
     * @see https://redis.io/commands/zcount
     */
    zcount: (key: string, min: string | number, max: string | number) => this;
    /**
     * @see https://redis.io/commands/zincrby
     */
    zincrby: <TData>(key: string, increment: number, member: TData) => this;
    /**
     * @see https://redis.io/commands/zinterstore
     */
    zinterstore: (destination: string, numKeys: number, keys: string[], opts?: import("./commands/zinterstore.js").ZInterStoreCommandOptions | undefined) => this;
    /**
     * @see https://redis.io/commands/zlexcount
     */
    zlexcount: (key: string, min: string, max: string) => this;
    /**
     * @see https://redis.io/commands/zmscore
     */
    zmscore: (key: string, members: unknown[]) => this;
    /**
     * @see https://redis.io/commands/zpopmax
     */
    zpopmax: <TData>(key: string, count?: number | undefined) => this;
    /**
     * @see https://redis.io/commands/zpopmin
     */
    zpopmin: <TData>(key: string, count?: number | undefined) => this;
    /**
     * @see https://redis.io/commands/zrange
     */
    zrange: <TData extends unknown[]>(...args: [key: string, min: number, max: number, opts?: ZRangeCommandOptions] | [
        key: string,
        min: `(${string}` | `[${string}` | "-" | "+",
        max: `(${string}` | `[${string}` | "-" | "+",
        opts: {
            byLex: true;
        } & ZRangeCommandOptions
    ] | [
        key: string,
        min: number | `(${number}` | "-inf" | "+inf",
        max: number | `(${number}` | "-inf" | "+inf",
        opts: {
            byScore: true;
        } & ZRangeCommandOptions
    ]) => this;
    /**
     * @see https://redis.io/commands/zrank
     */
    zrank: <TData>(key: string, member: TData) => this;
    /**
     * @see https://redis.io/commands/zrem
     */
    zrem: <TData>(key: string, ...members: TData[]) => this;
    /**
     * @see https://redis.io/commands/zremrangebylex
     */
    zremrangebylex: (key: string, min: string, max: string) => this;
    /**
     * @see https://redis.io/commands/zremrangebyrank
     */
    zremrangebyrank: (key: string, start: number, stop: number) => this;
    /**
     * @see https://redis.io/commands/zremrangebyscore
     */
    zremrangebyscore: (key: string, min: number, max: number) => this;
    /**
     * @see https://redis.io/commands/zrevrank
     */
    zrevrank: <TData>(key: string, member: TData) => this;
    /**
     * @see https://redis.io/commands/zscan
     */
    zscan: (key: string, cursor: number, opts?: import("./commands/scan.js").ScanCommandOptions | undefined) => this;
    /**
     * @see https://redis.io/commands/zscore
     */
    zscore: <TData>(key: string, member: TData) => this;
    /**
     * @see https://redis.io/commands/zunionstore
     */
    zunionstore: (destination: string, numKeys: number, keys: string[], opts?: import("./commands/zunionstore.js").ZUnionStoreCommandOptions | undefined) => this;
    /**
     * @see https://redis.io/commands/?group=json
     */
    get json(): {
        arrappend: (...args: CommandArgs<typeof JsonArrAppendCommand>) => Pipeline;
        arrindex: (...args: CommandArgs<typeof JsonArrIndexCommand>) => Pipeline;
        arrinsert: (...args: CommandArgs<typeof JsonArrInsertCommand>) => Pipeline;
        arrlen: (...args: CommandArgs<typeof JsonArrLenCommand>) => Pipeline;
        arrpop: (...args: CommandArgs<typeof JsonArrPopCommand>) => Pipeline;
        arrtrim: (...args: CommandArgs<typeof JsonArrTrimCommand>) => Pipeline;
        clear: (...args: CommandArgs<typeof JsonClearCommand>) => Pipeline;
        del: (...args: CommandArgs<typeof JsonDelCommand>) => Pipeline;
        forget: (...args: CommandArgs<typeof JsonForgetCommand>) => Pipeline;
        get: (...args: CommandArgs<typeof JsonGetCommand>) => Pipeline;
        mget: (...args: CommandArgs<typeof JsonMGetCommand>) => Pipeline;
        numincrby: (...args: CommandArgs<typeof JsonNumIncrByCommand>) => Pipeline;
        nummultby: (...args: CommandArgs<typeof JsonNumMultByCommand>) => Pipeline;
        objkeys: (...args: CommandArgs<typeof JsonObjKeysCommand>) => Pipeline;
        objlen: (...args: CommandArgs<typeof JsonObjLenCommand>) => Pipeline;
        resp: (...args: CommandArgs<typeof JsonRespCommand>) => Pipeline;
        set: (...args: CommandArgs<typeof JsonSetCommand>) => Pipeline;
        strappend: (...args: CommandArgs<typeof JsonStrAppendCommand>) => Pipeline;
        strlen: (...args: CommandArgs<typeof JsonStrLenCommand>) => Pipeline;
        toggle: (...args: CommandArgs<typeof JsonToggleCommand>) => Pipeline;
        type: (...args: CommandArgs<typeof JsonTypeCommand>) => Pipeline;
    };
}
